# Settings for different software
software:
  usearch:
    binary: usearch
    snakemake_env: snakemake
    uvsnake:
      commit: bc31e78 
  qiime:
    conda_env: qiime2-2022.11
  amptk:
    conda_env: amptk

# Input files
input:
  illumina:
    # paired-end
    run1: gz/samples_run1.tsv
    run2: gz/samples_run2.tsv
    # single-end R1 reads
    run1s: gz/samples_run1_single.tsv
    run2s: gz/samples_run2_single.tsv
    # single-end R2 reads
    run1srev:
      samples: gz/samples_run1_single_rev.tsv
      reverse: true
    run2srev:
      samples: gz/samples_run2_single_rev.tsv
      reverse: true    

# Workflow definition
workflows:
  # UPARSE pipeline (uses USEARCH)
  uparse:
    cluster: usearch_uparse
    taxonomy: default
  # UNOISE3 pipeline using VSEARCH for denoising
  unoise:
    cluster: usearch_unoise3
    taxonomy: default
  # UNOISE3 pipeline using USEARCH for read merging
  # Read merging is the one step which differs most
  # between USEARCH and VSEARCH: VSEARCH is more conservative
  # (https://groups.google.com/g/vsearch-forum/c/ojqZYbEyUw4/m/9RMhPQbXAwAJ).
  # Using VSEARCH for denoising and OTU-tab construction leads
  # to the same results as with USEARCH at least for the test
  # dataset (just the OTU order is slightly different)
  unoise_umerge:
    cluster: usearch_unoise3
    taxonomy: default
    settings:
      usearch:
        merge: { program: usearch }
  # UNOISE3 pipeline using USEARCH for all tasks
  # (except for simple ones such as de-replication and quality filtering)
  unoise_usearch:
    cluster: usearch_unoise3
    taxonomy: default
    settings:
      usearch:
        defaults: { program: usearch }
  # QIIME / DADA2
  qiime_dada2:
    cluster: qiime_dada2
    taxonomy: default
  # Amptk
  amptk_uparse:
    cluster: amptk_uparse
    taxonomy: default
  amptk_unoise:
    cluster: amptk_unoise3
    taxonomy: default
  amptk_dada2:
    cluster: amptk_dada2
    taxonomy: default

# qc:
#   fastqc:
#     random_subset: 1000

# Whether to pool the raw read files from different sequencing runs.
# This setting may make sense with some pipelines (e.g. USEARCH-based ones)
# e.g. if runs are known not to have a strong batch effect.
# With other methods such as DADA2 denoising, this is not recommended.
# Here, we activate pooling because the "run 2" actually stems from the same
# sequencing and was only included to test multi-run and pooling features.
pool_raw: true

# Files to compare with ASVs/OTUs using usearch_global (VSEARCH)
compare:
  mock:
    file: mock/mock_ITS2.fasta
    ident_threshold: 0.9

# Primers
primers:
  ITS:
    forward: 
      - ITS3-KYO2:  # comma delimited list of separately mixed oligos (simplified)
          GGGATGAAGAACGYAGYRAA,
          TCGATGAAGAMCGYWGCVAD
    reverse:
      - ITS4:
          AATCCTCCGCTTATTGATATGC,
          AATCCTCCGCTGAWTAATATGC
  trim_settings:
    min_overlap: 15
    max_error_rate: 0.25
    min_length: 100

# Taxonomic databases
taxonomy_dbs:
  ITS:
    unite:
      db: unite_eukarya_all
      defined_rank: species

# Taxonomic assignment methods
taxonomy_methods:
  sintax_70:
    method: sintax_usearch
    confidence: 0.7
  # # be careful with activating on PC (uses lots of memory)
  # sklearn_90:
  #   method: qiime_sklearn  # { sintax_usearch, qiime_sklearn }
  #   confidence: 0.7

# Usearch pipeline specific settings
usearch:
  defaults:
    program: vsearch

  # paired end merging
  merge:
    overlap_ident: 75  # percent
    max_diffs: 1000
    expected_length: 400

  # read filtering before denoising
  filter:
    max_error_rate: 0.002  #  0.8 errors per 400 bp

  unoise3:
    min_size: 8

  uparse:
    min_size: 2

  otutab:
    ident_threshold: 97  # percent
    maxaccepts: 64
    maxrejects: 64

# DADA2 specific settings
dada2:
  trunc_qual: 2.
  # trunc_len = 0 means no truncation/filtering, which is better for ITS data
  # https://benjjneb.github.io/dada2/ITS_workflow.html
  trunc_len:
    fwd: 0
    rev: 0
  max_err:
    fwd: 2
    rev: 5
  pooling_method: independent  # { independent, pseudo, pooled }
  chimera_method: consensus  # { consensus, per-sample, pooled }
  merge_maxdiffs: 1


# ITS recognition (fungi)
ITSx:
  organism_groups: all  # -t setting
  e-value: 1.0e-5
  allow_single_domain: 1e-9,0
