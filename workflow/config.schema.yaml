$schema: "https://json-schema.org/draft/2020-12/schema"
description: Snakecharmer configuration
properties:
  software:
    default: {}
    type: object
    properties:
      usearch:
        type: object
        properties:
          binary:
            type: string
            default: usearch
            description:
                USEARCH binary name/path (download from https://drive5.com/usearch).
                The default is 'usearch', assuming that the program is accessible
                in $PATH. Alternatively, an absolute or relative path
                (relative to analysis directory containing 'config') can be
                specified.
          snakemake_env:
            type: string
            description:
              Name of the Snakemake Conda environment (in case Snakemake was installed
              with Conda, if always in $PATH, this can be omitted
          uvsnake:
            type: object
            properties:
              github:
                type: string
                default: markschl/uvsnake
              path:
                type: string
                description: alternative local path instead of github repo
              tag:
                type: string
              commit:
                type: string
          required: [binary, uvsnake]
      qiime:
        type: object
        properties:
          conda_env:
            type: string
            description: Name of QIIME2 conda environment to use, e.g. qiime2-2022.8
        additionalProperties: false
        description: QIIME2 software settings (optional, only required if QIIME2 is used)
      amptk:
        type: object
        properties:
          conda_env:
            type: string
            description: Name of Amptk conda environment to use, e.g. "amptk"
        description: Amptk software settings (optional, only required if Amptk is used)
        additionalProperties: false
    additionalProperties: false

  input:
    type: object
    patternProperties:
      ^(illumina)$:
        patternProperties:
          ^\w+$:
            oneOf:
              - {type: string}
              -
                type: object
                properties:
                  samples:
                    type: string
                  reverse:
                    type: boolean
                required: [samples]
                additionalProperties: false    
        additionalProperties: false
    additionalProperties: false
  
  workflows:
    type: object
    patternProperties:
      ^(\w+)$:
        type: object
        properties:
          cluster:
            type: string
            enum: [usearch_unoise3, usearch_uparse, qiime_dada2, amptk_uparse, amptk_unoise3, amptk_dada2]
          taxonomy:
            oneOf:
              - { type: string, enum: [default], default: default }
              - 
                type: object
                properties:
                  dbs:
                    type: object
                    patternProperties: 
                      ^(\w+)$:
                        type: array
                        items: { type: string }
                        minItems: 1
                  methods:
                    type: array
                    items: { type: string }
                    minItems: 1
                required: [dbs, methods]
                additionalProperties: false
                description: >
                  If "default", all taxonomy databases (defined in taxonomy_dbs)
                  and assignment methods (see taxonomy_methods) are used. 
                  Alternatively, a subset can be specified
                  (dbs: marker: [list of databases], and methods: [list of metods])
          settings:
            type: object
            #   *note*: validating these sub-schemas would require all
            #   properties in "required" directives to be actually set, which
            #   is too restrictive.
            # properties:
            #   compare: { $ref: "#/properties/compare" }
            #   primers: { $ref: "#/properties/primers" }
            #   filter: { $ref: "#/properties/filter" }
            #   usearch: { $ref: "#/properties/usearch" }
            #   dada2: { $ref: "#/properties/dada2" }
            #   ITSx: { $ref: "#/properties/ITSx" }
            # additionalProperties: false
            description: >
              Workflow-specific settings that should override different default
              settings specified below (compare, primers, pool_raw, filter, usearch, dada2
              and ITSx)
        required: [cluster, taxonomy]
        additionalProperties: false
    additionalProperties: false

  # qc:
  #   type: object
  #   properties:
  #     fastqc:
  #       type: object
  #       properties:
  #         random_subset:
  #           type: integer
  #           description: >
  #             (number) Only supply a random subset of sequences to FastQC in
  #             order to speed things up.

  pool_raw:
    type: boolean
    default: false
    description: >
      Should duplicate files (samples with same name, but in different directory) 
      be pooled, or should a suffix number be added to make the samples unique?

  compare:
    type: object
    default: {}
    properties:
      defaults:
        defaults:
          type: object
          properties:
            ident_threshold:
              type: number
              minimum: 0
              maximum: 1
            maxhits:
              type: integer
              minimum: 1
              default: 1
            maxaccepts:
              type: integer
              minimum: 1
              default: 64
            maxrejects:
              type: integer
              minimum: 1
              default: 64    
    if:
      required: [defaults]
    else:
      patternProperties:
        ^(\w+)$:
          type: object
          properties:
            file:
              type: string
          additionalProperties:
            $ref": "#/properties/compare/properties/defaults"
        additionalProperties: false
      properties:
        defaults:
          $ref: "#/properties/compare/properties/defaults"
          type: object
          default:
            ident_threshold: 0
            maxaccepts: 64
            maxrejects: 64
            maxhits: 1
      additionalProperties: false
    minProperties: 1

  primers:
    type: object
    properties:
      trim_settings:
        type: object
        properties:
          min_overlap:
            type: integer
            minimum: 5
          max_error_rate:
            type: number
            exclusiveMinimum: 0
            maximum: 1
        required: [min_overlap, max_error_rate]
        additionalProperties: false
    if:
      required: [trim_settings]
    else:
      patternProperties:
        ^(\w+)$:
          type: object
          properties:
            forward:
              type: array
              items:
                type: object
                patternProperties:
                  ^(\w+)$:
                    type: string
              minItems: 1
            reverse:
              type: array
              items:
                type: object
                patternProperties:
                  ^(\w+)$:
                    type: string
              minItems: 1
            combinations:
              oneOf:
                - { type: string, enum: [all] }
                - 
                  type: array
                  items: { type: string }
                  minItems: 1
              default: all
          required: [forward, reverse]
          additionalProperties: false
      minProperties: 1
      additionalProperties: false

  taxonomy_dbs:
    type: object
    patternProperties:
      ^(\w+)$:
        type: object
        patternProperties:
          ^(\w+)$:
            type: object
            properties:
              db: { type: string }
              defined_rank: { type: string }
            required: [ db ]
            additionalProperties: false
        additionalProperties: false
    additionalProperties: false

  taxonomy_methods:
    type: object
    patternProperties:
      ^(\w+)$:
        type: object
        properties:
          method:
            type: string
            enum: [sintax_usearch, qiime_sklearn]
          confidence:
            type: number
            minimum: 0
            maximum: 1
          program:
            type: string
            enum: [vsearch, usearch]
            default: vsearch
        required: [method, confidence]
        additionalProperties: false
    additionalProperties: false

  # This is almost identical with the workflow/config.schema.yaml
  # here: https://github.com/markschl/uvsnake
  usearch:
    type: object
    default: {}
    properties:
      # repeatedly used settings
      defaults:
        type: object
        properties:
          program:
            type: string
            enum: [vsearch, usearch]
            default: vsearch
          maxaccepts:
            type: integer
            minimum: 1
            default: 1
          maxrejects:
            type: integer
            minimum: 1
            default: 1
          
      merge:
        type: object
        properties:
          overlap_ident:
            type: integer
            minimum: 0
            maximum: 100
          max_diffs:
            type: integer
            minimum: 0
          expected_length:
            type: integer
            minimum: 1
          program:
            $ref: "#/properties/usearch/properties/defaults/properties/program"
        required: [overlap_ident, max_diffs, expected_length]
        additionalProperties: false
      
      filter:
        type: object
        properties:
          max_error_rate:
            type: number
            minimum: 0
            maximum: 1
          min_length:
            type: integer
            minimum: 1
            default: 1
        required: [max_error_rate]
        additionalProperties: false
      
      unoise3:
        type: object
        properties:
          min_size:
            type: integer
            minimum: 1
          program:
            $ref: "#/properties/usearch/properties/defaults/properties/program"
          maxaccepts:
            $ref: "#/properties/usearch/properties/defaults/properties/maxaccepts"
          maxrejects:
            $ref: "#/properties/usearch/properties/defaults/properties/maxrejects"
        required: [min_size]
        additionalProperties: false
      
      uparse:
        type: object
        properties:
          min_size:
            type: integer
            minimum: 1
            default: 2
          program:
            $ref: "#/properties/usearch/properties/defaults/properties/program"
          maxaccepts:
            $ref: "#/properties/usearch/properties/defaults/properties/maxaccepts"
          maxrejects:
            $ref: "#/properties/usearch/properties/defaults/properties/maxrejects"
        required: [min_size]
        additionalProperties: false
      
      otutab:
        type: object
        properties:
          ident_threshold:
            type: number
            minimum: 2
            maximum: 100
            description:
              (number, percent) Identity threshold used for constructing the OTU 
              table by comparing the (unfiltered) sequencing reads against the
              OTUs. The minimum is 2 in order to prevent the accidental use of
              fractional identity (which is actually internally used and may
              be familiar to users of USEARCH/VSEARCH.
          extra:
            type: boolean
            default: false
          program:
            $ref: "#/properties/usearch/properties/defaults/properties/program"
          maxaccepts:
            $ref: "#/properties/usearch/properties/defaults/properties/maxaccepts"
          maxrejects:
            $ref: "#/properties/usearch/properties/defaults/properties/maxrejects"
        required: [ident_threshold]
        additionalProperties: false

  dada2:
    type: object
    default: {}
    properties:
      trunc_qual:
        type: number
        minimum: 0
      max_err_fwd:
        type: number
        minimum: 0
      max_err_rev:
        type: number
        minimum: 0
      trunclen_fwd:
        type: integer
        minimum: 0
      trunclen_rev:
        type: integer
        minimum: 0
      chimera_method:
        type: string
        enum: [consensus, per-sample, pooled]
      pooling_method:
        type: string
        enum: [independent, pseudo, pooled]
      merge_maxdiffs:
        type: integer
        minimum: 0
      min_length:
        type: integer
        minimum: 1
    required: [trunc_qual, max_err_fwd, max_err_rev, trunclen_fwd, trunclen_rev, pooling_method, chimera_method, merge_maxdiffs, min_length]
    additionalProperties: false

  ITSx:
    type: object
    default: {}
    properties:
      organism_groups:
        type: string
        description: >
          Taxonomic groups to include (see ITSx manual) or "all". "all" is
          the slowest setting but may be best unless you are sure that there
          are only sequences from certain groups.
      "e-value":
        type: number
        exclusiveMinimum: 0.0
        description: >
          Domain E-value cutoff in HMMER search for sequence to be included
          in the output (ITSx default: 1.0e-5)
      allow_single_domain:
        type: string
        default: 1e-9,0
      complement:
        type: string
        enum: [T, F]
        default: F  # ITSx uses T (true) as default, but we know the orientation of our amplicon
      heuristics:
        type: string
        enum: [T, F]
        default: F
      graphical:
        type: string
        enum: [T, F]
        default: F  # ITSx has T as default
      fasta:
        type: string
        enum: [T, F]
        default: T
      preserve:
        type: string
        enum: [T, F]
        default: F
      save_regions:
        type: string
        enum: [SSU, ITS1, 5.8S, ITS2, LSU, all, none]
        default: all  # ITSx has only ITS1,ITS2 as default
      partial:
        type: integer
        minimum: 0
        default: 50  # ITSx has 0 as default
    required: [organism_groups, e-value]
    additionalProperties: false

  # taxonomy.yaml
  taxonomy_db_sources:
    type: object
    patternProperties:
      ^(\w+)$:
        type: object
        properties:
          format:
            type: string
            enum: [unite_otus, midori, gtdb, utax, qiime, qiime_qza, idtaxa, qiime_nb]
        required: [format]
    additionalProperties: false

additionalProperties: false

required: [input, workflows, primers,
          taxonomy_dbs, taxonomy_methods,
          taxonomy_db_sources]
